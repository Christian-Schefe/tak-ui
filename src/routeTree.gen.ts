/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedPlayRouteImport } from './routes/_authenticated/play'
import { Route as AuthenticatedAccountRouteImport } from './routes/_authenticated/account'
import { Route as AuthenticatedSpectateGameIdRouteImport } from './routes/_authenticated/spectate.$gameId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedPlayRoute = AuthenticatedPlayRouteImport.update({
  id: '/play',
  path: '/play',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAccountRoute = AuthenticatedAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSpectateGameIdRoute =
  AuthenticatedSpectateGameIdRouteImport.update({
    id: '/spectate/$gameId',
    path: '/spectate/$gameId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/account': typeof AuthenticatedAccountRoute
  '/play': typeof AuthenticatedPlayRoute
  '/spectate/$gameId': typeof AuthenticatedSpectateGameIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/account': typeof AuthenticatedAccountRoute
  '/play': typeof AuthenticatedPlayRoute
  '/spectate/$gameId': typeof AuthenticatedSpectateGameIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/account': typeof AuthenticatedAccountRoute
  '/_authenticated/play': typeof AuthenticatedPlayRoute
  '/_authenticated/spectate/$gameId': typeof AuthenticatedSpectateGameIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/account' | '/play' | '/spectate/$gameId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/account' | '/play' | '/spectate/$gameId'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/account'
    | '/_authenticated/play'
    | '/_authenticated/spectate/$gameId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/play': {
      id: '/_authenticated/play'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof AuthenticatedPlayRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/account': {
      id: '/_authenticated/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AuthenticatedAccountRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/spectate/$gameId': {
      id: '/_authenticated/spectate/$gameId'
      path: '/spectate/$gameId'
      fullPath: '/spectate/$gameId'
      preLoaderRoute: typeof AuthenticatedSpectateGameIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedAccountRoute: typeof AuthenticatedAccountRoute
  AuthenticatedPlayRoute: typeof AuthenticatedPlayRoute
  AuthenticatedSpectateGameIdRoute: typeof AuthenticatedSpectateGameIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAccountRoute: AuthenticatedAccountRoute,
  AuthenticatedPlayRoute: AuthenticatedPlayRoute,
  AuthenticatedSpectateGameIdRoute: AuthenticatedSpectateGameIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
